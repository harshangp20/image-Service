package com.tridhyaintuit.image.utils;import com.tridhyaintuit.image.exception.FileStorageException;import lombok.SneakyThrows;import org.bytedeco.javacpp.opencv_core;import org.bytedeco.javacv.FFmpegFrameGrabber;import org.jetbrains.annotations.NotNull;import org.springframework.stereotype.Service;import org.springframework.util.StringUtils;import org.springframework.web.multipart.MultipartFile;import javax.imageio.ImageIO;import java.awt.image.BufferedImage;import java.io.File;import java.io.IOException;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.Paths;import java.nio.file.StandardCopyOption;import java.util.Arrays;import java.util.Date;import java.util.List;import java.util.Objects;import static com.tridhyaintuit.image.utils.ImageThumbnail.resizeImage;@Servicepublic class FileUtils {    private final FileConfig config;    private Path imageStorageLocation;    private Path videoStorageLocation;    private Path videoThumbnailStorageLocation;    public FileUtils(FileConfig config) {        this.config = config;        imageStorageLocation = Paths.get(this.config.getUPLOADED_IMAGES())                .toAbsolutePath().normalize();        videoStorageLocation = Paths.get(this.config.getUPLOADED_VIDEOS())                .toAbsolutePath().normalize();        videoThumbnailStorageLocation = Paths.get(this.config.getUPLOADED_THUMBNAILS())                .toAbsolutePath().normalize();        try {            Files.createDirectories(imageStorageLocation);            Files.createDirectories(videoStorageLocation);            Files.createDirectories(videoThumbnailStorageLocation);        } catch (Exception e) {            System.out.println(" Failed to create directory! " + e.getMessage());        }    }    @SneakyThrows    public List<String> storeVideo(@NotNull MultipartFile video, String folder) {        String videoName = StringUtils.cleanPath(Objects.requireNonNull(video.getOriginalFilename()));        System.out.println(videoStorageLocation);        String thumbnailName = StringUtils.cleanPath(Objects.requireNonNull(video.getOriginalFilename()));        System.out.println(videoThumbnailStorageLocation);        if (folder == null) {            videoStorageLocation = Paths.get(this.config.getUPLOADED_VIDEOS()).toAbsolutePath().normalize();        } else {            videoStorageLocation = Paths.get(this.config.getUPLOADED_VIDEOS() + "/" + folder).toAbsolutePath().normalize();        }        if (folder == null) {            videoThumbnailStorageLocation = Paths.get(this.config.getUPLOADED_THUMBNAILS()).toAbsolutePath().normalize();        } else {            videoThumbnailStorageLocation = Paths.get(this.config.getUPLOADED_THUMBNAILS()+ "/" + folder).toAbsolutePath().normalize();        }        try {            Files.createDirectories(videoStorageLocation);            System.out.println(videoStorageLocation);            Files.createDirectories(videoThumbnailStorageLocation);            System.out.println(videoThumbnailStorageLocation);        } catch (IOException e) {            System.err.println("Failed to create directory!" + e.getMessage());        }        try {            if (videoName.contains("..")) {                throw new RuntimeException("Sorry videoName contains invalid format pls try again with valid format...." + videoName);            }            String defaultName = videoName.substring(0, videoName.lastIndexOf("."))                    + "_" + new Date().getTime() + videoName.substring(videoName.lastIndexOf("."));            String defaultName1 = thumbnailName.substring(0, videoName.lastIndexOf("."))                    + "_" + new Date().getTime() + videoName.substring(videoName.lastIndexOf("."));            Path targetLocation = this.videoStorageLocation.resolve(defaultName);            Path targetLocation1 = this.videoStorageLocation.resolve(defaultName1);            Files.copy(video.getInputStream(), targetLocation, StandardCopyOption.REPLACE_EXISTING);            Files.copy(video.getInputStream(), targetLocation1, StandardCopyOption.REPLACE_EXISTING);            String name1 = "";            if (thumbnailName.indexOf(".") > 0) {                name1 = thumbnailName.substring(0, videoName.lastIndexOf("."));            }            String name2 = name1 + new Date().getTime() + ".png";            FFmpegFrameGrabber grabber = new FFmpegFrameGrabber                    (videoStorageLocation + "/" + defaultName1);            grabber.start();            opencv_core.IplImage image;            try {                image = grabber.grab();                BufferedImage bufferedImage = image.getBufferedImage();                ImageIO.write(bufferedImage                        , "png",                        new File(videoThumbnailStorageLocation + "/" + name2));                grabber.stop();            } catch (Exception e) {                e.printStackTrace();            }            List<String> names = Arrays.asList(defaultName, name2, videoStorageLocation.toAbsolutePath().toString(),                    videoThumbnailStorageLocation.toAbsolutePath().toString());            return names;        } catch (IOException e) {            throw new FileStorageException("Could not store file" + videoName + ". pls try again!",e);        }    }    public List<String> storeImage(MultipartFile image, String folder) {        String imageName = StringUtils.cleanPath(Objects.requireNonNull(image.getOriginalFilename()));        String extension = "";        int i = imageName.lastIndexOf('.');        if (i > 0) {            extension = imageName.substring(i + 1);        }        if (folder == null) {            imageStorageLocation = Paths.get(this.config.getUPLOADED_IMAGES()).toAbsolutePath().normalize();        } else {            imageStorageLocation = Paths.get(this.config.getUPLOADED_IMAGES() + "/" + folder).toAbsolutePath().normalize();        }        try {            Files.createDirectories(imageStorageLocation);        } catch (IOException e) {            System.err.println("Failed to create directory!" + e.getMessage());        }        try {            if (imageName.contains("..")) {                throw new RuntimeException(" Image is not valid !.... Pls try again....." + imageName);            }            String defaultName = imageName.substring(0,                    imageName.lastIndexOf(".")) +                    "_" +                    new Date().getTime() +                    imageName.substring(imageName.lastIndexOf("."));            Path targetLocation = imageStorageLocation.resolve(defaultName);            String smallName = imageName.substring(0,                    imageName.lastIndexOf(".")) +                    "_small_" +                    new Date().getTime() +                    imageName.substring(imageName.lastIndexOf("."));            String mediumName = imageName.substring(0,                    imageName.lastIndexOf(".")) +                    "_medium_" +                    new Date().getTime() +                    imageName.substring(imageName.lastIndexOf("."));            String largeName = imageName.substring(0,                    imageName.lastIndexOf(".")) +                    "_large_" +                    new Date().getTime() +                    imageName.substring(imageName.lastIndexOf("."));            Files.copy(image.getInputStream(), targetLocation, StandardCopyOption.REPLACE_EXISTING);            BufferedImage originalImage = ImageIO.read(new File(imageStorageLocation + "/" + defaultName));            BufferedImage smallImage = resizeImage(originalImage, 200, 200);            BufferedImage mediumImage = resizeImage(originalImage, 400, 400);            BufferedImage largeImage = resizeImage(originalImage, 2048, 2048);            ImageIO.write(smallImage, extension, new File(imageStorageLocation + "/" + smallName));            ImageIO.write(mediumImage, extension, new File(imageStorageLocation + "/" + mediumName));            ImageIO.write(largeImage, extension, new File(imageStorageLocation + "/" + largeName));            List<String> name = Arrays.asList(defaultName                    , smallName, mediumName, largeName,                    imageStorageLocation.toAbsolutePath().toString());            return name;        } catch (IOException e) {            throw new FileStorageException("Could not store file " + imageName + ". Please try again!", e);        }    }}